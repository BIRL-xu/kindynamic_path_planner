#ifndef KINDYNAMIC_PATH_PLANNER_COMMON_H_
#define KINDYNAMIC_PATH_PLANNER_COMMON_H_

#include <math.h>
#include <boost/math/constants/constants.hpp>

namespace kindynamic_path_planner {
namespace common {
static const double pi = boost::math::constants::pi<double>();
static const double twopi = 2. * pi;
static const double zero = 10 * std::numeric_limits<double>::epsilon();
static const double inf = std::numeric_limits<double>::infinity();

inline double mod2pi(double x) {
    double v = fmod(x, twopi);
    if (v < -pi)
        v += twopi;
    else if (v > pi)
        v -= twopi;
    return v;
}

static const bool reverse = false;
// vehecle param
static const double wheelDistance = 1.868;
static const double maxSteerAngle = 0.6; // rad
static const double maxRadius = wheelDistance / tan(maxSteerAngle);

// steerAngle 0 0.2 0.4 0.6(max steer angle) L sqrt(2)
// Forward Motion Primitives trajectory for collision check
// trajctory x
static const double traX[7][20] = {
    {0.00000000, 0.07443229, 0.14886459, 0.22329688, 0.29772917, 0.37216146, 0.44659376, 0.52102605, 0.59545834, 0.66989063,
     0.74432293, 0.81875522, 0.89318751, 0.96761981, 1.04205210, 1.11648439, 1.19091668, 1.26534898, 1.33978127, 1.41421356}, // 0 rad
    {0.00000000, 0.07443169, 0.14885973, 0.22328049, 0.29769032, 0.37208558, 0.44646262, 0.52081781, 0.59514748, 0.66944798,
     0.74371568, 0.81794690, 0.89213799, 0.96628530, 1.04038515, 1.11443387, 1.18842780, 1.26236325, 1.33623654, 1.41004398}, // 0.2 rad
    {0.00000000, 0.07442965, 0.14884346, 0.22322557, 0.29756013, 0.37183125, 0.44602303, 0.52011955, 0.59410484, 0.66796289,
     0.74167766, 0.81523306, 0.88861291, 0.96180099, 1.03478103, 1.10753664, 1.18005137, 1.25230870, 1.32429197, 1.39598446}, // 0.2 rad
    {0.00000000, 0.07442538, 0.14880926, 0.22311012, 0.29728635, 0.37129621, 0.44509784, 0.51864914, 0.59190781, 0.66483126,
     0.73737656, 0.80950044, 0.88115921, 0.95230872, 1.02290429, 1.09290072, 1.16225217, 1.23091212, 1.29883335, 1.36596781}, // 0.6 rad
    {0.00000000, 0.07443169, 0.14885973, 0.22328049, 0.29769032, 0.37208558, 0.44646262, 0.52081781, 0.59514748, 0.66944798,
     0.74371568, 0.81794690, 0.89213799, 0.96628530, 1.04038515, 1.11443387, 1.18842780, 1.26236325, 1.33623654, 1.41004398}, // -0.2 rad
    {0.00000000, 0.07442965, 0.14884346, 0.22322557, 0.29756013, 0.37183125, 0.44602303, 0.52011955, 0.59410484, 0.66796289,
     0.74167766, 0.81523306, 0.88861291, 0.96180099, 1.03478103, 1.10753664, 1.18005137, 1.25230870, 1.32429197, 1.39598446}, // -0.2 rad
    {0.00000000, 0.07442538, 0.14880926, 0.22311012, 0.29728635, 0.37129621, 0.44509784, 0.51864914, 0.59190781, 0.66483126,
     0.73737656, 0.80950044, 0.88115921, 0.95230872, 1.02290429, 1.09290072, 1.16225217, 1.23091212, 1.29883335, 1.36596781} // -0.6 rad
};

// trajectory y
static const double traY[7][20] = {
    {0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000,
     0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000}, //  0 rad
    {0.00000000, 0.00030060, 0.00120241, 0.00270541, 0.00480962, 0.00751504, 0.01082165, 0.01472947, 0.01923850, 0.02434872,
     0.03006015, 0.03637278, 0.04328662, 0.05080166, 0.05891790, 0.06763534, 0.07695399, 0.08687384, 0.09739489, 0.10851715}, // 0.2 rad
    {0.00000000, 0.00062697, 0.00250786, 0.00564269, 0.01003145, 0.01567415, 0.02257077, 0.03072133, 0.04012582, 0.05078424,
     0.06269659, 0.07586288, 0.09028309, 0.10595724, 0.12288532, 0.14106733, 0.16050328, 0.18119315, 0.20313696, 0.22633470}, // 0.4 rad
    {0.00000000, 0.00101452, 0.00405806, 0.00913064, 0.01623226, 0.02536290, 0.03652257, 0.04971128, 0.06492902, 0.08217579,
     0.10145160, 0.12275643, 0.14609030, 0.17145320, 0.19884513, 0.22826609, 0.25971609, 0.29319511, 0.32870317, 0.36624026}, // 0.6 rad
    {-0.00000000, -0.00030060, -0.00120241, -0.00270541, -0.00480962, -0.00751504, -0.01082165, -0.01472947, -0.01923850, -0.02434872,
     -0.03006015, -0.03637278, -0.04328662, -0.05080166, -0.05891790, -0.06763534, -0.07695399, -0.08687384, -0.09739489, -0.10851715}, // -0.2 rad
    {-0.00000000, -0.00062697, -0.00250786, -0.00564269, -0.01003145, -0.01567415, -0.02257077, -0.03072133, -0.04012582, -0.05078424,
     -0.06269659, -0.07586288, -0.09028309, -0.10595724, -0.12288532, -0.14106733, -0.16050328, -0.18119315, -0.20313696, -0.22633470}, // -0.4 rad
    {-0.00000000, -0.00101452, -0.00405806, -0.00913064, -0.01623226, -0.02536290, -0.03652257, -0.04971128, -0.06492902, -0.08217579,
     -0.10145160, -0.12275643, -0.14609030, -0.17145320, -0.19884513, -0.22826609, -0.25971609, -0.29319511, -0.32870317, -0.36624026} // -0.6 rad
};

// trajectory theta
static const double traT[7][20] = {
    {0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000,
     0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000}, // 0 rad
    {0.00000000, 0.00807720, 0.01615454, 0.02423213, 0.03231013, 0.04038865, 0.04846783, 0.05654780, 0.06462869, 0.07271064,
     0.08079378, 0.08887823, 0.09696414, 0.10505164, 0.11314086, 0.12123193, 0.12932499, 0.13742017, 0.14551760, 0.15361743}, // 0.2 rad
    {0.00000000, 0.01684681, 0.03369482, 0.05054521, 0.06739920, 0.08425798, 0.10112274, 0.11799471, 0.13487509, 0.15176510,
     0.16866596, 0.18557890, 0.20250517, 0.21944600, 0.23640265, 0.25337639, 0.27036851, 0.28738028, 0.30441301, 0.32146803}, // 0.4 rad
    {0.00000000, 0.02726095, 0.05452696, 0.08180311, 0.10909450, 0.13640624, 0.16374348, 0.19111142, 0.21851530, 0.24596044,
     0.27345221, 0.30099608, 0.32859760, 0.35626242, 0.38399632, 0.41180518, 0.43969505, 0.46767210, 0.49574269, 0.52391336}, // -0.2 rad
    {-0.00000000, -0.00807720, -0.01615454, -0.02423213, -0.03231013, -0.04038865, -0.04846783, -0.05654780, -0.06462869, -0.07271064,
     -0.08079378, -0.08887823, -0.09696414, -0.10505164, -0.11314086, -0.12123193, -0.12932499, -0.13742017, -0.14551760, -0.15361743}, // 0.2 rad
    {-0.00000000, -0.01684681, -0.03369482, -0.05054521, -0.06739920, -0.08425798, -0.10112274, -0.11799471, -0.13487509, -0.15176510,
     -0.16866596, -0.18557890, -0.20250517, -0.21944600, -0.23640265, -0.25337639, -0.27036851, -0.28738028, -0.30441301, -0.3214680}, // 0.4 rad
    {-0.00000000, -0.02726095, -0.05452696, -0.08180311, -0.10909450, -0.13640624, -0.16374348, -0.19111142, -0.21851530, -0.24596044,
     -0.27345221, -0.30099608, -0.32859760, -0.35626242, -0.38399632, -0.41180518, -0.43969505, -0.46767210, -0.49574269, -0.52391336}, // -0.2 rad
};

// dx dy dt
static const double dx[7] = {1.41421356, 1.41004398, 1.39598446, 1.36596781, 1.41004398, 1.39598446, 1.36596781};
static const double dy[7] = {0.0, 0.10851715, 0.22633470, 0.36624026, -0.10851715, -0.22633470, -0.36624026};
static const double dt[7] = {0.0, 0.15361743, 0.32146803, 0.52391336, -0.15361743, -0.32146803, -0.52391336};

// the number of successor node or possible direction
static const int dir = 14;

//! inscribed radius 内切半径
static const double inscribedRadius = 1.0; // 0.95
//! circumscribed radius外接半径
static const double circumscribedRadius = 2.0;

// penalize function
// chord length
static const double chordLength[7] = {1.41421356, 1.41560510, 1.42032146, 1.43051820, 1.41560510, 1.42032146, 1.43051820};
static const double steerAngle[7] = {.0, .2, .4, .6, -.2, -.4, -.6};

// revers penalty
static const double penaltyReverse = 2.0;

// turn angle penalty
static const double penaltyTurnAngle = 1.05;

// change steer angle penalty
static const double penaltyChangeSteerAngle = 1.05;

// change direction penalty
static const double penaltyChangeDirection = 2.0;
} // namespace common
} // namespace kindynamic_path_planner
#endif